ls
vi src/main.rs
ls
ls | sort-by size | reverse
ls | where sizz > 10kb
ls | where size > 10kb
ls | where size > 1kb
ps
$env.config.edit_mode = 'vi'
ls
ls | where sizz > 10kb
ls
$env.config.buffer_editor = nvim
$env.config.buffer_editor = "nvim"
config nu
cd .dotfiles/
ls
`~/Library/Application Support/nushell/config.nu`
vi `~/Library/Application Support/nushell/config.nu`
cp `~/Library/Application Support/nushell/config.nu` .
ls
vi config.nu
vi zshrc
vi config.nu
vi zshrc
nvim zshrc
rm `~/Library/Application Support/nushell/config.nu`
ls
vi
nvim install.conf.yaml
$nu.default-config-dir
nvim install.conf.yaml
ls
./install
nvim install.conf.yaml
ln -s `~/Library/Application Support/nushell/` ~/.config
ls ~/.config
nvim install.conf.yaml
rm ~/.config/nushell
ls ~/.config
ls
vi 
nvim nushell/config.nu
vi
vi nushell/config.nu
ls
nvim
which nvim
mv ~/local.nu ~/.local.nu
cd ../dev/close/closeio
ls
source .venv/bin/activate
source .venv/bin/activate.nu
overlay use .venv/bin/activate.nu
ls
vi nushell/config.nu
ls
pwd
cd ../dev/close/closeio
av
ls
dv
deactivate 
cd
cd .dotfiles/
vi ../.local.nu
cshell
vi ../.local.nu
cshell
vi ../.local.nu
ls
vi nushell/config.nu
vi ~/.local.nu
cshell
$env
$env.CLOSE_HOME
vi ~/.local.nu
clear
help commands | explore
echo "hey"
echo "hey" | encode base64 
$env.config | expore
$env.config | explore
http get https://api.github.com/repos/nushell/nushell/contributors
http get https://api.github.com/repos/nushell/nushell/contributors | select login
http get https://api.github.com/repos/nushell/nushell/contributors | select login contributions
"hey" | encode base64 
hey | encode base64 
[one two three]
[one two three] | to yaml
[foo bar baz] | insert 1 'beeze'
ls
ls | sort-by size 
ls | sort-by -r size
git status
ls
start zshrc
vi zshrc
do { $env.config.table.mode = "none"; ls | table }
vi nushell/config.nu
overlay use ~/.config/nushell/config.nu
ls
$env | reject config | transpose key val | each {|r| echo $"$env.($r.key) = '($r.val)'"} | str join (char nl)
cd
cd dev/qmk_userspace/
ls
vi keyboards/splitkb/kyria/keymaps/drew/keymap.c
nvim keyboards/splitkb/kyria/keymaps/drew/keymap.c
vi ~/.config/nushell/config.nu
ls
vi
vim
nvim
which
which nvim
zsh
nvim
vi
zsh
nvim
ls
cd ../..
cd qmk_userspace/
ls
vi keyboards/splitkb/kyria/keymaps/drew/keymap.c
ls
jq
vi tmp.json
ls
zsh
rg
ls
nvim
ls
vi ~/.config/nvim/init.lua
cd dev/close/closeio
ls
vi
fzf
zsh
vi
neovide
neovide &
neovide
cd
cd fh
ls
mkdir big-req
cd big-req/
ls
vi tmp.json
cat tmp.json
jq
cat tmp.json | jq
cat tmp.json | jq > formatted.json
zsh
cd ~/dev/close/closeio
ls
neovide
brew install pueue
pueue neovide
pueue add neovide
pueued -d
pueue add neovide
ls
pueue 
ls
clear
neovide
ls
cd ../..
ls
cd temporal-project/
uv venv
ls
ls -a
ls -a .venv
ls -a .venv/bin
overlay use ~/.config/nushell/config.nu
vi
vi ~/.dotfiles/nushell/config.nu
overlay use ~/.config/nushell/config.nu
tmux
cd ../..
ls
cd temporal-project/
overlay use .venv/bin/activate.nu
ls
uv add temporalio
uv
zsh
overlay use ~/.config/nushell/config.nu
vi ~/.dotfiles/nushell/config.nu
neovide
overlay use ~/.config/nushell/config.nu
vi ~/.local.nu
vi .venv/bin/activate.nu
load-env ~/.dotfiles/nushell/config.nu
source ~/.dotfiles/nushell/config.nu
vi ~/.dotfiles/nushell/config.nu
source ~/.dotfiles/nushell/config.nu
uv
vi ~/.dotfiles/nushell/config.nu
echo $env.PATH
ls
vi $HOME
vi ~/.local.nu
source ~/.dotfiles/nushell/config.nu
uv
echo $env.PATH
source ~/.local.zsh
source ~/.local.nu
echo $env.PATH
uv
ls
cd dev/temporal-project/
ls
uv add temporalio
uv init
uv add temporalio
brew install temporal
temporal server start-dev
cd ..
git clone https://github.com/temporalio/money-transfer-project-template-python
cd money-transfer-project-template-python/
cd ..
cd close/closeio
av
neovide
ls
ls
zsh
export LS_COLORS="$(vivid generate molokai)"
ls
vi ~/.config/nvim/init.lua
zsh
vi
ls
vi ~/.config/nvim/init.lua
neovide
zsh
neovide
ls
neovide
ls
zsh
ls
av
vi ~/.local.nu
vi
vi ~/.config/nushell/config.nu
"hello"
nu
vi
zsh
ls
vi ~/.local.nu
$env.LS_COLORS
$env
vi ~/.config/nushell/env.nu
ls
cowsay
ls
nushell
zsh
config nu
$nu.config-path
ls
config nu
ls
config nu
$env.EDITOR
nvim
vi
config nu
ls
table --list
$env.config.table.mode = 'rounded'
ls
$env.config.table.mode = 'ascii_rounded'
ls
$env.config.table.mode = 'basic_compact'
ls
$env.config.table.mode = 'basic'
ls
$env.config.table.mode = 'compact'
ls
$env.config.table.mode = 'compact_double'
ls
$env.config.table.mode = 'default'
ls
$env.config.table.mode = 'dots'
ls
$env.config.table.mode = 'heavy'
ls
$env.config.table.mode = 'light'
ls
$env.config.table.mode = 'markdown'
ls
$env.config.table.mode = 'none'
ls
$env.config.table.mode = 'psql'
ls
$env.config.table.mode = 'reinforced'
ls
$env.config.table.mode = 'restructured'
ls
$env.config.table.mode = 'rounded'
ls
$env.config.table.mode = 'thin'
ls
$env.config.table.mode = 'with_love'
ls
$env.config.table.mode = 'light'
ls
vi ~/.config/nvim/lua/plugins/ui.lua
vi ~/.config/nvim/lua/local.lua
ls
cd
ls
zsh
ls
vi ~/.local.zsh
zsh
cd
cd .config/
ls
cd nvim/
ls
vi
ls
vi init.lua
ls
vi init.lua
git status
git add .
git status
git commit -m "push latest"
git push
ls
ya
yazi
ls
vi init.lua
ls
zsh
zsh
zsh
cd dev/
ls
cd temporal-project/
ls
vi hello.py
av
vi hello.py
cd dev/temporal-project/
zsh
node
zsh
ls
cd ..
ls
cd ..
ls
ls -a
fnm
fnm install node
fnm install
fnm ls
fnm ls-remote
fnm install v22.13.1
node
ls
cd dev/temporal-project/
vi hello.py
ls
pwd
ls
clear
ls
cd ..
ls
cd money-transfer-project-template-python/
ls
vi
ls .venv
ls
vi README.md
uv venv
vi .venv/bin/activate.nu
.venv/bin/activate.nu
overlay use .venv/bin/activate.nu
ls
vi README.md
uv pip install temporalio
vi README.md
python run_workflow.py
zsh
ls
vi README.md
ls
cd ..
cd close/closeio
ls
fd
fd app_testing
aws
aws iam list-access-keys --user-name drew.myers
zsh
vi run_workflow.py
ls
deactivate
ls
cd ..
ls
cd close/closeio
neovide
zsh
neovide
overlay use .venv/bin/activate.nu
black closeio
black tests
ruff closeio
ruff check closeio
ruff check closeio --fix
vi closeio/saved_views/graphql/mutations/delete_saved_view.py
ruff check closeio --fix
ruff check tests --fix
mypy closeio
vi closeio/saved_views/graphql/mutations/delete_saved_view.py
mypy closeio
git status
lg
lazygit
rg lint
cd docs/
rg lint
vi Backend-Testing-Guidelines.md
cd ..
rg lint README.md
ls
vi
rg "bulk" closeio | rg "mutation"
vi closeio/sequences/graphql/mutations/delete_sequence.py
dce
docker compose
docker compose exec -it closeio_shell bash
docker compose exec -f $env.HOME/dev/close/devtools/docker-compose.yaml -it closeio_shell bash
$env.HOME
$env.HOME/dev
"$env.HOME/dev"
"{$env.HOME}/dev"
$env.HOME + dev
docker compose exec -f $env.HOME+/dev/close/devtools/docker-compose.yaml -it closeio_shell bash
$env.HOME+dev
docker compose exec -f $env.HOME + /dev/close/devtools/docker-compose.yaml -it closeio_shell bash
docker compose  -f $env.HOME + /dev/close/devtools/docker-compose.yaml exec -it closeio_shell bash
path
docker compose  -f ($env.HOME + /dev/close/devtools/docker-compose.yaml) exec -it closeio_shell bash
lazygit
./scripts/remote-shell bash
ls
cd ../devtools/
ls
vi README.md
vi .env
cd ../closeio
./scripts/remote-shell bash
cd ../devtools/
vi README.md
vi docs/AWS-Setup.md
vi ~
cat docs/AWS-Setup.md
aws --profile close sts get-caller-identity
vi ~/.aws/credentials
aws --profile close sts get-caller-identity
cd ../closeio
cd ../close/
cd closeio
ls
vi closeio/saved_views/services.py
overlay use .venv/bin/activate.nu
vi closeio/saved_views/services.py
deactivate
./scripts/remote-shell bash
lazygit
ls
cd sql_migrations/
ls
cd versions/
ls
vi 2025_02_07_1753_b857ed6913de_index_lead_suggestions_by_org_id_and_.py
vi 2025_02_10_1624_b87c129b3f3d_add_value_to_purgesteprecordtype_enum.py
vi 2025_02_07_1753_b857ed6913de_index_lead_suggestions_by_org_id_and_.py
vi 2025_02_10_1624_b87c129b3f3d_add_value_to_purgesteprecordtype_enum.py
git status
git add .
git status
git commit -m "update alembic revision number"
git push
vi 2025_02_10_1624_b87c129b3f3d_add_value_to_purgesteprecordtype_enum.py
cd ../..
lg
lazygit
zsh
./scripts/remote-shell bash
overlay use .venv/bin/activate.nu
./scripts/remote-shell bash
cd ../close/closeio/
vault
zsh
zsh
zsh
zsh
cd 
cd .configs/nvimm
cd .config/vnim
cd .config/nvim
ls
vi init.lua
vi lua/plugins/snacks.lua
vi init.lua
vi lua/plugins/snacks.lua
cd .config/nvim
cd
cd .config/nvim
vi init.lua
vi lua/plugins/snacks.lua
cd ../devtools/
bin/init
